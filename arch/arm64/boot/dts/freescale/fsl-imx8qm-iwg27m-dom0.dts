/*
 * Copyright 2018 NXP
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */


#include "fsl-imx8qm-iwg27m.dts"
#include "fsl-imx8qm-xen.dtsi"

/ {
        model = "iW-RainboW-G27D-i.MX8QM_SMARC DOM0";
        compatible = "fsl,imx8qm-iwg27m", "fsl,imx8qm";

	chosen {
		#address-cells = <2>;
		#size-cells = <2>;

		/* Could be updated by U-Boot */
		module@0 {
			bootargs = "earlycon=xen console=hvc0 loglevel=8 root=/dev/mmcblk1p2 rw  rootwait";
			compatible = "xen,linux-zimage", "xen,multiboot-module";
			reg = <0x00000000 0x80a00000 0x00000000 0xf93a00>;
               };
	};

	domu {
		/*
		 * There are 5 MUs, 0A is used by Dom0, 1A is used
		 * by ATF, so for DomU, 2A/3A/4A could be used.
		 * SC_R_MU_0A
		 * SC_R_MU_1A
		 * SC_R_MU_2A
		 * SC_R_MU_3A
		 * SC_R_MU_4A
		 * The rsrcs and pads will be configured by uboot scu_rm cmd
		 */
		#address-cells = <1>;
		#size-cells = <0>;
		doma {
			compatible = "xen,domu";
			/*
			 * The name entry in VM configuration file
			 * needs to be same as here.
			 */
			domain_name = "DomU";
			/*
			 * The reg property will be updated by U-Boot to
			 * reflect the partition id.
			 */
			reg = <0>;
			init_on_rsrcs = <
				SC_R_MU_2A
			>;
                        /* Resources that will be transferred between
                         * M41 and AP, when support android auto.
                         */
                        rsrcs-m41-ap = <
                                SC_R_CSI_0
                                SC_R_CSI_0_PWM_0
                                SC_R_CSI_0_I2C_0
                                SC_R_LVDS_1
                                SC_R_LVDS_1_I2C_0
                                SC_R_LVDS_1_PWM_0
                                SC_R_DC_1
                                SC_R_DC_1_BLIT0
                                SC_R_DC_1_BLIT1
                                SC_R_DC_1_BLIT2
                                SC_R_DC_1_BLIT_OUT
                                SC_R_DC_1_WARP
                                SC_R_DC_1_VIDEO0
                                SC_R_DC_1_VIDEO1
                                SC_R_DC_1_FRAC0
                                SC_R_DC_1_PLL_0
                                SC_R_DC_1_PLL_1
                                SC_R_ISI_CH0
                        >;
			rsrcs = <
				SC_R_GPU_1_PID0
				SC_R_GPU_1_PID1
				SC_R_GPU_1_PID2
				SC_R_GPU_1_PID3
				SC_R_LVDS_1
				SC_R_LVDS_1_I2C_0
				SC_R_LVDS_1_PWM_0
                                SC_R_DC_0
                                SC_R_DC_0_BLIT0
                                SC_R_DC_0_BLIT1
                                SC_R_DC_0_BLIT2
                                SC_R_DC_0_BLIT_OUT
                                SC_R_DC_0_CAPTURE0
                                SC_R_DC_0_CAPTURE1
                                SC_R_DC_0_WARP
                                SC_R_DC_0_INTEGRAL0
                                SC_R_DC_0_INTEGRAL1
                                SC_R_DC_0_VIDEO0
                                SC_R_DC_0_VIDEO1
                                SC_R_DC_0_FRAC0
                                SC_R_DC_0_FRAC1
                                SC_R_DC_0_PLL_0
                                SC_R_DC_0_PLL_1
				SC_R_DC_1
				SC_R_DC_1_BLIT0
				SC_R_DC_1_BLIT1
				SC_R_DC_1_BLIT2
				SC_R_DC_1_BLIT_OUT
				SC_R_DC_1_CAPTURE0
				SC_R_DC_1_CAPTURE1
				SC_R_DC_1_WARP
				SC_R_DC_1_INTEGRAL0
				SC_R_DC_1_INTEGRAL1
				SC_R_DC_1_VIDEO0
				SC_R_DC_1_VIDEO1
				SC_R_DC_1_FRAC0
				SC_R_DC_1_FRAC1
				SC_R_DC_1_PLL_0
				SC_R_DC_1_PLL_1
				/* mipi 0 */
                                SC_R_MIPI_0
                                SC_R_MIPI_0_I2C_0
                                SC_R_MIPI_0_I2C_1
				SC_R_MIPI_0_PWM_0
				SC_R_MIPI_1
				SC_R_MIPI_1_I2C_0
				SC_R_MIPI_1_I2C_1
				SC_R_MIPI_1_PWM_0
				SC_R_HDMI
				SC_R_HDMI_I2C_0
				SC_R_SDHC_0
				SC_R_USB_0
				SC_R_USB_0_PHY
				SC_R_UART_1
				SC_R_DMA_0_CH14
				SC_R_DMA_0_CH15
				SC_R_MU_2A
                                /* pcie */
                                SC_R_PCIE_B
                                SC_R_PCIE_A
                                SC_R_SERDES_0
                                SC_R_HSIO_GPIO
				/* sai 1 */
				SC_R_SAI_1
				SC_R_DMA_2_CH14
				SC_R_DMA_2_CH15
				/* codec */
				SC_R_MCLK_OUT_1
				SC_R_MCLK_OUT_0
				SC_R_AUDIO_CLK_1
				SC_R_AUDIO_CLK_0
				SC_R_AUDIO_PLL_1
				SC_R_AUDIO_PLL_0
				/* intmux_cm41 */
				SC_R_M4_1_INTMUX
				/* usbotg3 */
                                SC_R_USB_2
                                SC_R_USB_2_PHY
				/* i2c1 */
				SC_R_I2C_1
				/* i2c2 */
				SC_R_I2C_2
				/* usdhc3 */
				SC_R_SDHC_2
				/* esai0 */
				SC_R_ESAI_0
                                SC_R_DMA_2_CH6
                                SC_R_DMA_2_CH7
				/* fec 1*/
				SC_R_ENET_0
				>;
                        /* Pads that will be transferred between M41 and AP */
                        pads-m41-ap = <
                                SC_P_LVDS1_I2C1_SCL
                                SC_P_LVDS1_I2C1_SDA
				SC_P_SIM0_PD
				SC_P_SIM0_RST
				SC_P_M41_I2C0_SCL
                        >;
			pads = <
                                /* i2c1_lvds1 */
                                SC_P_LVDS1_I2C1_SCL
                                SC_P_LVDS1_I2C1_SDA
				/* mipi_dsi0 */
				SC_P_MIPI_DSI0_I2C0_SCL
				SC_P_MIPI_DSI0_I2C0_SDA
				/* mipi_dsi1 */
				SC_P_MIPI_DSI1_I2C0_SCL
				SC_P_MIPI_DSI1_I2C0_SDA
				/* emmc */
				SC_P_EMMC0_CLK
				SC_P_EMMC0_CMD
				SC_P_EMMC0_DATA0
				SC_P_EMMC0_DATA1
				SC_P_EMMC0_DATA2
				SC_P_EMMC0_DATA3
				SC_P_EMMC0_DATA4
				SC_P_EMMC0_DATA5
				SC_P_EMMC0_DATA6
				SC_P_EMMC0_DATA7
				SC_P_EMMC0_STROBE
				SC_P_EMMC0_RESET_B
				/* usb otg */
				SC_P_USB_SS3_TC0
				/* uart1 */
				SC_P_UART1_RX
				SC_P_UART1_TX
				SC_P_UART1_CTS_B
				SC_P_UART1_RTS_B
				SC_P_QSPI1A_DQS
				/* mipi dsi 1 */
				/* SC_P_SIM0_PD_LSIO_GPIO0_IO03*/
				SC_P_SIM0_PD
				/* pinctrl_ts_active_iwg27m */
				/*SC_P_SIM0_RST_LSIO_GPIO0_IO01*/
				SC_P_SIM0_RST
				/*SC_P_M41_I2C0_SCL_LSIO_GPIO0_IO10*/
				SC_P_M41_I2C0_SCL
				/* pinctrl_type_c */
				SC_P_SIM0_CLK
				SC_P_USDHC1_STROBE
				/* pinctrl_hp_mic_detect */
				SC_P_SIM0_IO
				SC_P_SIM0_GPIO0_00
				/* sai 1 */
				SC_P_SAI1_RXD
				SC_P_SAI1_TXC
				SC_P_SAI1_TXD
				SC_P_SAI1_TXFS
				SC_P_MCLK_OUT0
				/* usb otg 3*/
				SC_P_USDHC1_RESET_B
				SC_P_MIPI_DSI1_I2C0_SDA
                                /*usbotgs typec */
                                SC_P_QSPI1A_SS0_B
                                SC_P_USB_SS3_TC3
                                SC_P_QSPI1A_DATA0
				/* i2c1 */
				SC_P_GPT0_CLK
				SC_P_GPT0_CAPTURE
				SC_P_GPT1_CLK
				SC_P_GPT1_CAPTURE
				/* usdhc3 wifi */
				SC_P_USDHC2_CLK
				SC_P_USDHC2_CMD
				SC_P_USDHC2_DATA0
				SC_P_USDHC2_DATA1
				SC_P_USDHC2_DATA2
				SC_P_USDHC2_DATA3
				SC_P_USDHC1_VSELECT
				SC_P_ESAI0_TX2_RX3
				SC_P_ESAI0_TX3_RX2
				SC_P_ESAI0_TX4_RX1
				/* fec1 */
				SC_P_ENET0_MDC
				SC_P_ENET0_MDIO
				SC_P_ENET0_RGMII_TX_CTL
				SC_P_ENET0_RGMII_TXC
				SC_P_ENET0_RGMII_TXD0
				SC_P_ENET0_RGMII_TXD1
				SC_P_ENET0_RGMII_TXD2
				SC_P_ENET0_RGMII_TXD3
				SC_P_ENET0_RGMII_RXC
				SC_P_ENET0_RGMII_RX_CTL
				SC_P_ENET0_RGMII_RXD0
				SC_P_ENET0_RGMII_RXD1
				SC_P_ENET0_RGMII_RXD2
				SC_P_ENET0_RGMII_RXD3
				SC_P_ENET0_REFCLK_125M_25M
				SC_P_PCIE_CTRL0_CLKREQ_B
				SC_P_PCIE_CTRL1_CLKREQ_B
				SC_P_PCIE_CTRL1_WAKE_B
				>;
                        gpios = <&gpio0 0 0>,
				<&gpio0 1 0>,
				<&gpio0 2 GPIO_ACTIVE_LOW>,
				<&gpio0 3 GPIO_ACTIVE_LOW>,
				<&gpio0 5 GPIO_ACTIVE_LOW>,
				<&gpio0 10 0>,
				<&gpio1 13 GPIO_ACTIVE_LOW>,
				<&gpio1 21 GPIO_ACTIVE_HIGH>,
                                <&gpio1 27 GPIO_ACTIVE_LOW>,
                                <&gpio1 28 GPIO_ACTIVE_LOW>,
				<&gpio2 28 0>,
				<&gpio2 29 0>,
				<&gpio2 30 0>,
				<&gpio4 3 GPIO_ACTIVE_LOW>,
                                <&gpio4 6 GPIO_ACTIVE_LOW>,
				<&gpio4 7 GPIO_ACTIVE_HIGH>,
                                <&gpio4 9 GPIO_ACTIVE_LOW>,
                                <&gpio4 11 GPIO_ACTIVE_HIGH>,
                                <&gpio4 19 GPIO_ACTIVE_HIGH>,
                                <&gpio4 22 GPIO_ACTIVE_LOW>,
                                <&gpio4 26 GPIO_ACTIVE_HIGH>,
                                <&gpio4 25 GPIO_ACTIVE_HIGH>,
                                <&gpio4 27 GPIO_ACTIVE_LOW>,
                                <&gpio4 29 GPIO_ACTIVE_LOW>,
				<&gpio5 23 0>,
				<&gpio5 28 0>,
				<&gpio5 29 0>,
				<&gpio5 30 0>;

		};
	};

	reserved-memory {
		/* global autoconfigured region for contiguous allocations */
		linux,cma {
			compatible = "shared-dma-pool";
			reusable;
			size = <0 0x28000000>;
			alloc-ranges = <0 0xd0000000 0 0x28000000>;
			linux,cma-default;
		};
	};

	/*
	display-subsystem {
		compatible = "fsl,imx-display-subsystem";
		ports = <&dpu1_disp0>, <&dpu1_disp1>;
	};
	*/
	/* Passthrough to domu */
	mu2: mu@5d1d0000 {
		compatible = "fsl,imx8-mu";
		reg = <0x0 0x5d1d0000 0x0 0x10000>;
		interrupts = <GIC_SPI 178 IRQ_TYPE_LEVEL_HIGH>;
		fsl,scu_ap_mu_id = <0>;
		xen,passthrough;
		status = "disabled";
	};

        cm41: cm41@1 {
                fsl,sc_rsrc_id = <SC_R_M4_1_PID0>,
                                 <SC_R_M4_1_PID1>,
                                 <SC_R_M4_1_PID2>,
                                 <SC_R_M4_1_PID3>,
                                 <SC_R_M4_1_PID4>;
                #stream-id-cells = <1>;
                iommus = <&smmu>;
                xen,passthrough;
        };

        irqsteer_cm41: irqsteer_cm41@0x51080000 {
                reg = <0x0 0x51080000 0x0 0x10000>;
                xen,passthrough;
        };

        mu_rpmsg1_b: mu_rpmsg1_b@0x5d2a0000 {
                reg = <0x0 0x5d2a0000 0x0 0x10000>;
                xen,passthrough;
        };
};

&mu_6_lpcg {
        xen,passthrough;
};

&mu_6_lpcg_b {
        xen,passthrough;
};

&mu_7_lpcg_b {
        xen,passthrough;
};

&usbotg1_lpcg {
        xen,passthrough;
};

&sdhc1_lpcg {
        xen,passthrough;
};

&sdhc3_lpcg {
        xen,passthrough;
};

&enet0_lpcg {
        xen,passthrough;
};

&lpuart1 {
        xen,passthrough;
};

&lpuart1_lpcg {
	xen,passthrough;
};


/*
 * DomU CM41 use this, but DomU OS not need this,
 * because smmu is enabled for CM41, so need to
 *create the lpuart2 mapping in SMMU
 */
&lpuart2 {
        xen,passthrough;
};

&lpuart2_lpcg {
        xen,passthrough;
};

&di_lvds1_lpcg {
        xen,passthrough;
};

&dc_1_lpcg {
        xen,passthrough;
};

&edma01 {
	#stream-id-cells = <1>;
	xen,passthrough;
	fsl,sc_rsrc_id = <SC_R_DMA_0_CH14>,
			 <SC_R_DMA_0_CH15>;
};

&edma20 {
        #stream-id-cells = <1>;
        xen,passthrough;
        /* Put edma20 and edma21 resource here */
        fsl,sc_rsrc_id = <SC_R_DMA_2_CH0>,
                         <SC_R_DMA_2_CH1>,
                         <SC_R_DMA_2_CH2>,
                         <SC_R_DMA_2_CH3>,
                         <SC_R_DMA_2_CH4>,
                         <SC_R_DMA_2_CH5>,
                         <SC_R_DMA_2_CH6>,
                         <SC_R_DMA_2_CH7>,
                         <SC_R_DMA_2_CH12>,
                         <SC_R_DMA_2_CH13>,
			 <SC_R_DMA_2_CH14>,
			 <SC_R_DMA_2_CH15>;
};

&edma21 {
        xen,passthrough;
};

&edma24 {
        xen,passthrough;
};

&edma25 {
	xen,passthrough;
};

/* SMMU */
&smmu {
	mmu-masters = <&dpu2 0x13>, <&dpu1 0x14>, <&gpu_3d1 0x15>,
		      <&usdhc1 0x12>, <&usbotg1 0x11>,
		      <&edma01 0x10>, <&edma20 0x9>, <&usdhc3 0x8>,
		      <&fec1 0x7>, <&usbotg3 0x4>;
};

&lvds_region1 {
        xen,passthrough;
};

&irqsteer_lvds1 {
        xen,passthrough;
};

&i2c1_lvds1 {
        xen,passthrough;
};

&ldb1_phy {
        xen,passthrough;
};

&ldb1 {
        xen,passthrough;
};

&ldb1_phy {
        xen,passthrough;
};

&ldb1 {
        xen,passthrough;
};

&lvds_region2 {
	xen,passthrough;
};

&irqsteer_lvds1 {
	xen,passthrough;
};

&i2c1_lvds1 {
	xen,passthrough;
};

&ldb1_phy {
	xen,passthrough;
};

&ldb1 {
	xen,passthrough;
};

&ldb2_phy {
        xen,passthrough;
};

&ldb2 {
        xen,passthrough;
};

&dpu1_intsteer {
        xen,passthrough;
};

&dpu1 {
        xen,passthrough;
        #stream-id-cells = <1>;
        iommus = <&smmu>;
};

&prg1 {
        xen,passthrough;
};

&prg2 {
        xen,passthrough;
};

&prg3 {
        xen,passthrough;
};

&prg4 {
        xen,passthrough;
};

&prg5 {
        xen,passthrough;
};

&prg6 {
        xen,passthrough;
};

&prg7 {
        xen,passthrough;
};

&prg8 {
        xen,passthrough;
};

&prg9 {
        xen,passthrough;
};

&dpr1_channel1 {
	xen,passthrough;
};

&dpr1_channel2 {
        xen,passthrough;
};

&dpr1_channel3 {
        xen,passthrough;
};

&dpr2_channel1 {
        xen,passthrough;
};

&dpr2_channel2 {
        xen,passthrough;
};

&dpr2_channel3 {
        xen,passthrough;
};

&dpu2_intsteer {
	xen,passthrough;
};

&dpu2 {
	xen,passthrough;
	#stream-id-cells = <1>;
	iommus = <&smmu>;
};

&prg10 {
	xen,passthrough;
};

&prg11 {
	xen,passthrough;
};

&prg12 {
	xen,passthrough;
};

&prg13 {
	xen,passthrough;
};

&prg14 {
	xen,passthrough;
};

&prg15 {
	xen,passthrough;
};

&prg16 {
	xen,passthrough;
};

&prg17 {
	xen,passthrough;
};

&prg18 {
	xen,passthrough;
};

&dpr3_channel1 {
	xen,passthrough;
};

&dpr3_channel2 {
	xen,passthrough;
};

&dpr3_channel3 {
	xen,passthrough;
};

&dpr4_channel1 {
	xen,passthrough;
};

&dpr4_channel2 {
	xen,passthrough;
};

&dpr4_channel3 {
	xen,passthrough;
};

/* GPU */
&pd_gpu1 {
	xen,passthrough;
};

&gpu_3d1 {
	xen,passthrough;
	#stream-id-cells = <1>;
	iommus = <&smmu>;
};

&imx8_gpu_ss {
	cores = <&gpu_3d0>;
	/delete-property/ reg;
	/delete-property/ reg-names;
};

&sata {
	status = "disabled";
};

&usdhc1 {
	xen,passthrough;
	#stream-id-cells = <1>;
	iommus = <&smmu>;
};

&usdhc3 {
        xen,passthrough;
        #stream-id-cells = <1>;
        iommus = <&smmu>;
};

&fec1 {
        xen,passthrough;
        #stream-id-cells = <1>;
        iommus = <&smmu>;
};

&usbotg1 {
	/* Hack reg */
	reg = <0x0 0x5b0d0000 0x0 0x1000>;
	xen,passthrough;
	#stream-id-cells = <1>;
	iommus = <&smmu>;
};

&usbmisc1 {
	/* Hack */
	xen,passthrough;
	status = "disabled";
};

&usbmisc2 {
        /* Hack */
        xen,passthrough;
        status = "disabled";
};

&usbphy1 {
	reg = <0x0 0x5b100000 0x0 0x1000>;
	xen,passthrough;
};

&gpio0 {
	xen,passthrough;
};

&gpio1 {
        xen,shared;
};

&gpio2 {
        xen,passthrough;
};

&gpio4 {
        xen,passthrough;
};

&gpio5 {
        xen,passthrough;
};

&irqsteer_dsi0 {
	xen,passthrough;
};

&mipi_dsi_csr1 {
        status = "disabled";
        xen,passthrough;
};

&mipi_dsi_phy1 {
        status = "disabled";
	xen,passthrough;
};

&mipi_dsi1 {
	xen,passthrough;
};

&mipi_dsi_bridge1 {
        status = "disabled";
	xen,passthrough;
};

&i2c1 {
	xen,passthrough;
	codec: sgtl5000@0a {
		xen,passthrough;
	};
	fusb30x@22 {
		xen,passthrough;
	};
};

&i2c2 {
	xen,passthrough;
	cst148@1a {
		xen,passthrough;
	};
	goodix@5d {
		xen,passthrough;
	};
};

&sai1 {
	xen,passthrough;
};

&esai0 {
        xen,passthrough;
};

&intmux_cm41 {
        xen,passthrough;
};

&usbotg3_lpcg {
        xen,passthrough;
};

&usbotg3 {
        xen,passthrough;
        #stream-id-cells = <1>;
        iommus = <&smmu>;
};

&usbh1 {
	xen,passthrough;
};

&usdhc3 {
	xen,passthrough;
	wilc_sdio {
		xen,passthrough;
	};
};

&aud_asrc_0_lpcg {
        xen,passthrough;
};

&aud_esai_0_lpcg {
        xen,passthrough;
};

&aud_pll_clk0_lpcg {
        xen,passthrough;
};

&aud_pll_clk1_lpcg {
        xen,passthrough;
};

&aud_mclkout0_lpcg {
        xen,passthrough;
};

&aud_mclkout1_lpcg {
        xen,passthrough;
};

&aud_rec_clk0_lpcg {
        xen,passthrough;
};

&aud_rec_clk1_lpcg {
        xen,passthrough;
};

&fec1 {
	xen,passthrough;
	mdio {
		xen,passthrough;
	};
};

&pciea{
	xen,passthrough;
};

&pcieb{
	xen,passthrough;
};
